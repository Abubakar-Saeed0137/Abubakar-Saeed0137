DBMS-Project 

Phase [1-4] Combined 

Instructor: Afham Nazir 

Project Proposal: 

Music Streaming Service 

MUHAMMAD Abubakar Saeed 
 
 

Project Overview: 

A music streaming service platform where users can access a vast collection of songs, create playlists, follow artists, and discover new music. The platform will offer features like user registration, personalized recommendations, playlist management, and social interactions. 

 

Entities: 

User 

Artist 

Album 

Track 

Playlist 

Follow 

Genre 

Subscription 

Review 

Notification 

Playlist_Track 

 

Features: 

The music streaming platform will offer the following key features: 

Main Features: 

User registration and profile setup. 

Browse and search for artists, albums, and tracks. 

Create and manage playlists. 

Follow artists and receive updates. 

Personalized music recommendations. 

User reviews and ratings for tracks and albums. 

Subscription plans for premium features. 

Notifications for new releases, updates, and recommendations. 

 

Entity Attributes: 

The attributes of the entities are given below: 

User:  

user_id (pk) 

user_name 

Email 

Password 

date_of_birth 

Country 

subscription_id (fk) 

 

Artist: 

artist_id (pk) 

artist_name 

genre_id (fk) 

biography 

 

Album: 

album_id (pk) 

album_title 

release_date  

artist_id (fk) 

 

Track: 

track_id (pk)  

track_title  

duration 

album_id(fk) 

 

Playlist: 

playlist_id (pk)  

playlist_name  

user_id (fk) 

 

Follow: 

follow_id (pk)  

user_id (fk)  

artist_id (fk) 

 

Genre: 

genre_id (pk) 

genre_name 

 

Subscription: 

subscription_id (pk)  

subscription_type 

price  

benefits 

 

Review: 

review_id (pk)  

user_id (fk) 

track_id (fk)  

rating 

comment  

date 

 

Notification: 

notification_id (pk)  

user_id (fk) 

message 

date 

status 

Playlist_Track 

Playlist_id (pk) 

Track_id (pk) 

 

 

Relationships Among Entities: 

 

User: 

One-to-Many with Playlist 

One-to-Many with Review 

Many-to-One with Subscription 

One-to-Many with Notification 

One-to-Many with Follow 

 

Artist: 

One-to-Many with Album 

One-to-Many with Follow 

 

Album: 

One-to-Many with Track 

Track: 

Many-to-One with Album 

One-to-Many with Review 

 

Playlist: 

Many-to-One with User 

Many-to-Many with Track 

 

Follow: 

Many-to-One with User 

Many-to-One with Artist 

 

Genre: 

One-to-Many with Artist 

 

Subscription: 

One-to-Many with User 

 

Review: 

Many-to-One with User 

Many-to-One with Track 

 

Notification: 

Many-to-One with User 

 

 

Playlist_Track: 

Many-to-One with Playlist 

Many-to-One with Track 

 

 

 

 

 

 

 

 

ENTITY RELATED DIAGRAM: 

 

 

 

Picture 1, Picture 

 

 

 

RELATIONAL SCHEMA: 

 

 

Picture 2, Picture 

 

 

Queries to create tables: 

CREATE TABLE Users ( 

    user_id INT PRIMARY KEY , 

    user_name VARCHAR(100) NOT NULL, 

    email VARCHAR(100) NOT NULL UNIQUE, 

    password VARCHAR(255) NOT NULL, 

    date_of_birth DATE, 

    country VARCHAR(100), 

    subscription_id INT 

); 

 

 

CREATE TABLE Artist ( 

    artist_id INT PRIMARY KEY , 

    artist_name VARCHAR(100) NOT NULL, 

    genre_id INT, 

    biography TEXT 

); 

 

 

CREATE TABLE Album ( 

    album_id INT PRIMARY KEY, 

    album_title VARCHAR(100) NOT NULL, 

    release_date DATE, 

    artist_id INT 

); 

 

 

CREATE TABLE Track ( 

    track_id INT PRIMARY KEY, 

    track_title VARCHAR(100) NOT NULL, 

    duration TIME, 

    album_id INT 

); 

 

 

CREATE TABLE Playlist ( 

    playlist_id INT PRIMARY KEY, 

    playlist_name VARCHAR(100) NOT NULL, 

    user_id INT 

); 

 

 

 

 

 

CREATE TABLE Follow ( 

    follow_id INT PRIMARY KEY, 

    user_id INT, 

    artist_id INT 

); 

 

 

CREATE TABLE Genre ( 

    genre_id INT PRIMARY KEY, 

    genre_name VARCHAR(100) NOT NULL 

); 

 

 

CREATE TABLE Subscription ( 

    subscription_id INT PRIMARY KEY , 

    subscription_type VARCHAR(100) NOT NULL, 

    price DECIMAL(10, 2) NOT NULL, 

    benefits TEXT 

); 

 

 

CREATE TABLE Review ( 

    review_id INT PRIMARY KEY , 

    user_id INT, 

    track_id INT, 

    rating INT CHECK (rating >= 1 AND rating <= 5), 

    comment TEXT, 

    date DATE 

); 

 

 

CREATE TABLE Notification ( 

    notification_id INT PRIMARY KEY , 

    user_id INT, 

    message TEXT NOT NULL, 

    date DATE, 

    status VARCHAR(50)     

); 

 

 

CREATE TABLE Playlist_Track ( 

    playlist_id INT, 

    track_id INT, 

    PRIMARY KEY (playlist_id, track_id) 

); 

 

 

Queries to create relationships in tables: 

Alter table Users add constraint fk1 FOREIGN KEY (subscription_id) REFERENCES Subscription(subscription_id); 

Alter table artist add constraint fk2 FOREIGN KEY (genre_id) REFERENCES Genre(genre_id); 

 

Alter table album add constraint fk3 FOREIGN KEY (artist_id) REFERENCES Artist(artist_id); 

 

Alter table track add constraint fk4 FOREIGN KEY (album_id) REFERENCES Album(album_id); 

 

Alter table playlist add constraint fk5 FOREIGN KEY (user_id) REFERENCES Users(user_id); 

 

Alter table follow add constraint fk6 FOREIGN KEY (user_id) REFERENCES Users(user_id); 

 

Alter table follow add constraint fk7 FOREIGN KEY (artist_id) REFERENCES Artist(artist_id); 

 

Alter table review add constraint fk8 FOREIGN KEY (user_id) REFERENCES Users(user_id); 

 

Alter table review add constraint fk9 FOREIGN KEY (track_id) REFERENCES Track(track_id); 

 

Alter table notification add constraint fk10 FOREIGN KEY (user_id) REFERENCES Users(user_id); 

 

Alter table playlist_track add constraint fk11 FOREIGN KEY (playlist_id) REFERENCES Playlist(playlist_id); 

 

Alter table playlist_track add constraint fk12    FOREIGN KEY (track_id) REFERENCES Track(track_id); 

 

 

 

 

 

 

 

Queries to insert values in a table: 

INSERT INTO Genre (genre_name) VALUES  

('Rock'),  

('Pop'),  

('Jazz'),  

('Classical'),  

('Hip-Hop'),  

('Electronic'),  

('Country'),  

('Blues'),  

('Reggae'),  

('Metal'); 

 

 

INSERT INTO Subscription (subscription_type, price, benefits) VALUES  

('Free', 0.00, 'Basic features'),  

('Premium', 9.99, 'Ad-free, offline mode, high-quality audio'), 

('Student', 4.99, 'Premium benefits for students'), 

('Family', 14.99, 'Premium benefits for up to 6 family members'), 

('Annual', 99.99, 'Premium benefits for a year'), 

('Trial', 0.00, 'Premium features for 1 month'), 

('Basic', 1.99, 'Limited premium features'), 

('Plus', 7.99, 'Additional premium features'), 

('Ultimate', 19.99, 'All premium features with extra content'), 

('Special', 5.99, 'Special subscription with curated content'); 

 

 

INSERT INTO Artist (artist_name, genre_id, biography) VALUES  

('Artist A', 1, 'Biography of Artist A'),  

('Artist B', 2, 'Biography of Artist B'),  

('Artist C', 3, 'Biography of Artist C'),  

('Artist D', 4, 'Biography of Artist D'),  

('Artist E', 5, 'Biography of Artist E'),  

('Artist F', 6, 'Biography of Artist F'),  

('Artist G', 7, 'Biography of Artist G'),  

('Artist H', 8, 'Biography of Artist H'),  

('Artist I', 9, 'Biography of Artist I'),  

('Artist J', 10, 'Biography of Artist J'); 

 

 

 

 

 

 

 

 

INSERT INTO Album (album_title, release_date, artist_id) VALUES  

('Album 1', '2023-01-01', 1),  

('Album 2', '2023-02-01', 2),  

('Album 3', '2023-03-01', 3),  

('Album 4', '2023-04-01', 4),  

('Album 5', '2023-05-01', 5),  

('Album 6', '2023-06-01', 6),  

('Album 7', '2023-07-01', 7),  

('Album 8', '2023-08-01', 8),  

('Album 9', '2023-09-01', 9),  

('Album 10', '2023-10-01', 10); 

 

 

INSERT INTO Track (track_title, duration, album_id) VALUES  

('Track 1', '00:03:45', 1),  

('Track 2', '00:04:15', 2),  

('Track 3', '00:03:50', 3),  

('Track 4', '00:04:00', 4),  

('Track 5', '00:03:30', 5),  

('Track 6', '00:04:05', 6),  

('Track 7', '00:03:55', 7),  

('Track 8', '00:04:10', 8),  

('Track 9', '00:03:35', 9),  

('Track 10', '00:04:20', 10); 

 

 

INSERT INTO Users (user_name, email, password, date_of_birth, country, subscription_id) VALUES  

('User 1', 'user1@example.com', 'password1', '1990-01-01', 'USA', 1),  

('User 2', 'user2@example.com', 'password2', '1992-02-02', 'UK', 2),  

('User 3', 'user3@example.com', 'password3', '1993-03-03', 'Canada', 3),  

('User 4', 'user4@example.com', 'password4', '1994-04-04', 'Australia', 4),  

('User 5', 'user5@example.com', 'password5', '1995-05-05', 'India', 5),  

('User 6', 'user6@example.com', 'password6', '1996-06-06', 'Germany', 6),  

('User 7', 'user7@example.com', 'password7', '1997-07-07', 'France', 7),  

('User 8', 'user8@example.com', 'password8', '1998-08-08', 'Japan', 8),  

('User 9', 'user9@example.com', 'password9', '1999-09-09', 'Brazil', 9),  

('User 10', 'user10@example.com', 'password10', '2000-10-10', 'Russia', 10); 

 

 

 

 

 

 

 

 

INSERT INTO Playlist (playlist_name, user_id) VALUES  

('Playlist 1', 1),  

('Playlist 2', 2),  

('Playlist 3', 3),  

('Playlist 4', 4),  

('Playlist 5', 5),  

('Playlist 6', 6),  

('Playlist 7', 7),  

('Playlist 8', 8),  

('Playlist 9', 9),  

('Playlist 10', 10); 

 

INSERT INTO Follow (user_id, artist_id) VALUES  

(1, 1),  

(2, 2),  

(3, 3),  

(4, 4),  

(5, 5),  

(6, 6),  

(7, 7),  

(8, 8),  

(9, 9),  

(10, 10); 

 

INSERT INTO Review (user_id, track_id, rating, comment, date) VALUES  

(1, 1, 5, 'Great track!', '2023-06-01'),  

(2, 2, 4, 'Nice song', '2023-06-02'),  

(3, 3, 3, 'Okay track', '2023-06-03'),  

(4, 4, 5, 'Loved it', '2023-06-04'),  

(5, 5, 2, 'Not my style', '2023-06-05'),  

(6, 6, 4, 'Good track', '2023-06-06'),  

(7, 7, 5, 'Awesome!', '2023-06-07'),  

(8, 8, 3, 'It\'s fine', '2023-06-08'),  

(9, 9, 4, 'Pretty good', '2023-06-09'),  

(10, 10, 5, 'Amazing', '2023-06-10'); 

 

INSERT INTO Notification (user_id, message, date, status) VALUES  

(1, 'New album released!', '2023-06-01', 'unread'),  

(2, 'New track added!', '2023-06-02', 'read'),  

(3, 'Subscription renewed', '2023-06-03', 'unread'),  

(4, 'Artist you follow released a new album', '2023-06-04', 'read'),  

(5, 'Playlist updated', '2023-06-05', 'unread'),  

(6, 'New features available', '2023-06-06', 'read'),  

(7, 'Account settings updated', '2023-06-07', 'unread'),  

(8, 'Password changed', '2023-06-08', 'read'),  

(9, 'New genre added', '2023-06-09', 'unread'),  

(10, 'Service maintenance notification', '2023-06-10', 'read'); 

INSERT INTO Playlist_Track (playlist_id, track_id) VALUES  

(1, 1),  

(1, 2),  

(2, 2),  

(2, 3),  

(3, 3),  

(3, 4),  

(4, 4),  

(4, 5),  

(5, 5),  

(5, 6),  

(6, 6),  

(6, 7),  

(7, 7),  

(7, 8),  

(8, 8),  

(8, 9),  

(9, 9),  

(9, 10),  

(10, 10),  

(10, 1); 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

Join queries, correlated queries and sub queries: 

 

SELECT u.user_name, p.playlist_name, t.track_title 

FROM Users u 

JOIN Playlist p ON u.user_id = p.user_id 

JOIN Playlist_Track pt ON p.playlist_id = pt.playlist_id 

JOIN Track t ON pt.track_id = t.track_id; 

 

SELECT a.album_title, ar.artist_name 

FROM Album a 

JOIN Artist ar ON a.artist_id = ar.artist_id; 

 

SELECT t.track_title, al.album_title 

FROM Track t 

JOIN Album al ON t.album_id = al.album_id; 

 

SELECT u.user_name, s.subscription_type 

FROM Users u 

JOIN Subscription s ON u.subscription_id = s.subscription_id; 

 

SELECT u.user_name, ar.artist_name 

FROM Users u 

JOIN Follow f ON u.user_id = f.user_id 

JOIN Artist ar ON f.artist_id = ar.artist_id; 

 

SELECT ar.artist_name, g.genre_name 

FROM Artist ar 

JOIN Genre g ON ar.genre_id = g.genre_id; 

 

SELECT u.user_name, t.track_title, r.rating, r.comment 

FROM Review r 

JOIN Users u ON r.user_id = u.user_id 

JOIN Track t ON r.track_id = t.track_id; 

 

SELECT u.user_name, n.message, n.date, n.status 

FROM Notification n 

JOIN Users u ON n.user_id = u.user_id; 

 

 

SELECT p.playlist_name, u.user_name 

FROM Playlist p 

JOIN Users u ON p.user_id = u.user_id; 

 

 

 

 

SELECT ar.artist_name, al.album_title 

FROM Artist ar 

JOIN Album al ON ar.artist_id = al.artist_id; 

 

SELECT user_name 

FROM Users u 

WHERE (SELECT COUNT(*) FROM Playlist p WHERE p.user_id = u.user_id) > 1; 

 

SELECT artist_name 

FROM Artist ar 

WHERE EXISTS ( 

    SELECT 1 

    FROM Album al 

    WHERE al.artist_id = ar.artist_id 

    AND al.release_date >= '2023-01-01' 

    AND al.release_date <= '2023-12-31' 

); 

 

SELECT track_title 

FROM Track t 

WHERE EXISTS ( 

    SELECT 1 

    FROM Review r 

    WHERE r.track_id = t.track_id 

); 

 

SELECT user_name 

FROM Users u 

WHERE EXISTS ( 

    SELECT 1 

    FROM Notification n 

    WHERE n.user_id = u.user_id 

    AND n.status = 'unread' 

); 

 

SELECT user_name 

FROM Users u 

WHERE EXISTS ( 

    SELECT 1 

    FROM Follow f 

    WHERE f.user_id = u.user_id 

); 

 

 

 

 

SELECT playlist_name 

FROM Playlist 

WHERE playlist_id IN ( 

    SELECT playlist_id 

    FROM Playlist_Track 

    WHERE track_id = 1 

); 

 

SELECT user_name 

FROM Users 

WHERE user_id IN ( 

    SELECT DISTINCT user_id 

    FROM Review 

); 

 

SELECT album_title 

FROM Album 

WHERE artist_id IN ( 

    SELECT artist_id 

    FROM Artist 

    WHERE genre_id = (SELECT genre_id FROM Genre WHERE genre_name = 'Rock') 

); 

 

SELECT track_title 

FROM Track 

WHERE track_id IN ( 

    SELECT track_id 

    FROM Playlist_Track 

    WHERE playlist_id IN ( 

        SELECT playlist_id 

        FROM Playlist 

        WHERE user_id = 1 

    ) 

); 

 

SELECT DISTINCT genre_name 

FROM Genre 

WHERE genre_id IN ( 

    SELECT genre_id 

    FROM Artist 

    WHERE artist_id IN ( 

        SELECT artist_id 

        FROM Follow 

        WHERE user_id = 1 

   ) 

); 
